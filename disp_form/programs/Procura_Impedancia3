Needs["DatabaseLink`"];
conn = OpenSQLConnection[JDBC["MySQL(Connector/J)", "localhost:3306/input"], Username -> "root", Password -> "input212"];
{{variavelLoopEscolhidaPorJardiel}} = SQLExecute[conn, "SELECT COUNT(*) FROM valor_dispositivo_atributos WHERE jaleu=FALSE AND id_dispositivo=3"];
While[variavelLoopEscolhidaPorJardiel>0,
{{user}} = SQLExecute[conn, "SELECT SUBSTRING_INDEX(email,'@',1) FROM valor_dispositivo_atributos WHERE jaleu=FALSE ORDER BY id_valor ASC LIMIT 1"];
{{fr}}=SQLExecute[conn, "SELECT valor FROM valor_dispositivo_atributos WHERE id_config=9 AND jaleu=FALSE ORDER BY id_valor ASC LIMIT 1"];
SQLExecute[conn, "UPDATE valor_dispositivo_atributos SET jaleu=TRUE WHERE id_config=9 AND jaleu=FALSE ORDER BY id_valor ASC LIMIT 1"];
{{h}}=SQLExecute[conn, "SELECT valor FROM valor_dispositivo_atributos WHERE id_config=10 AND jaleu=FALSE ORDER BY id_valor ASC LIMIT 1"];
SQLExecute[conn, "UPDATE valor_dispositivo_atributos SET jaleu=TRUE WHERE id_config=10 AND jaleu=FALSE ORDER BY id_valor ASC LIMIT 1"];
{{\[Epsilon]r}}=SQLExecute[conn, "SELECT valor FROM valor_dispositivo_atributos WHERE id_config=11 AND jaleu=FALSE ORDER BY id_valor ASC LIMIT 1"];
SQLExecute[conn, "UPDATE valor_dispositivo_atributos SET jaleu=TRUE WHERE id_config=11 AND jaleu=FALSE ORDER BY id_valor ASC LIMIT 1"];
{{tan\[Delta]}}=SQLExecute[conn, "SELECT valor FROM valor_dispositivo_atributos WHERE id_config=12 AND jaleu=FALSE ORDER BY id_valor ASC LIMIT 1"];
SQLExecute[conn, "UPDATE valor_dispositivo_atributos SET jaleu=TRUE WHERE id_config=12 AND jaleu=FALSE ORDER BY id_valor ASC LIMIT 1"];
{{ZLReal}}=SQLExecute[conn, "SELECT valor FROM valor_dispositivo_atributos WHERE id_config=13 AND jaleu=FALSE ORDER BY id_valor ASC LIMIT 1"];
SQLExecute[conn, "UPDATE valor_dispositivo_atributos SET jaleu=TRUE WHERE id_config=13 AND jaleu=FALSE ORDER BY id_valor ASC LIMIT 1"];
{{ZLImag}}=SQLExecute[conn, "SELECT valor FROM valor_dispositivo_atributos WHERE id_config=14 AND jaleu=FALSE ORDER BY id_valor ASC LIMIT 1"];
SQLExecute[conn, "UPDATE valor_dispositivo_atributos SET jaleu=TRUE WHERE id_config=14 AND jaleu=FALSE ORDER BY id_valor ASC LIMIT 1"];
{{factor}}=SQLExecute[conn, "SELECT valor FROM valor_dispositivo_atributos WHERE id_config=15 AND jaleu=FALSE ORDER BY id_valor ASC LIMIT 1"];
SQLExecute[conn, "UPDATE valor_dispositivo_atributos SET jaleu=TRUE WHERE id_config=15 AND jaleu=FALSE ORDER BY id_valor ASC LIMIT 1"];

fr = fr*10^9;
fmin = fr - 0.1*10^9;
fmax = fr + 0.1*10^9;
f = Range[fmin, fmax, 0.001*10^9];

h = h*10^-3;
\[Epsilon]r;
tan\[Delta];
ZL = ZLReal + I *ZLImag;
factor;



SetDirectory[NotebookDirectory[]];
SetOptions[ListPlot, BaseStyle -> FontSize -> 14, 
  LabelStyle -> Directive[Bold, Black]];
SetOptions[ListLinePlot, BaseStyle -> FontSize -> 20, 
  LabelStyle -> Directive[Bold, Black], PlotStyle -> Red, 
  Filling -> Axis];

\[CurlyEpsilon]r = \[Epsilon]r;

\[Sigma] = 3.64*10^7;   

\[Epsilon]0 = 8.854/10^12;    
\[Mu]0 = (4 \[Pi])/10^7;
\[Eta]0 = Sqrt[\[Mu]0/\[Epsilon]0];
c0 = 1/Sqrt[\[Mu]0 \[Epsilon]0];

 \[Omega]0 = 2 \[Pi] fr;

 k0 = \[Omega]0 Sqrt[\[Mu]0 \[Epsilon]0];

  Rs = Sqrt[2/(\[Omega]0 \[Mu]0 \[Sigma])]; 
I0 = 1;

Q1 = 0;

Q2 = 0;

\[Omega][f_] := 2 \[Pi] f;
k[f_] := (2 \[Pi] f)/c0;
k1[f1_] := (2 \[Pi] f1)/c0;
\[Omega]1[f1_] := 2 *Pi*f1;

b = c0/(2 fr Sqrt[\[Epsilon]r]);

af[b_] := factor*b;
a = af[b];
x0 = a/2;
z0 = 0.001;
Dx = 1.3*10^-3;
Dz = 1.3*10^-3;
Dimen = Table[Subscript[m, i, j], {i, 4}, {j, 2}];
Dimen[[All, 1]] = {"areal", "breal", "x0real", "z0real"};
MatD = Table[Subscript[m, i, j], {i, 7}, {j, 5}];
MatD[[All, 1]] = {" ", "\[CapitalDelta]La", "\[CapitalDelta]Lb", 
   "\[CapitalDelta]Lx0", "\[CapitalDelta]Lz0", "Q2", "Q1"};
MatD[[1]] = {" ", "Diseño Inicial", "1.Feedback", "2.Feedback", 
   "3.Feedback"};
kt[m_, n_] := Sqrt[((m \[Pi])/a)^2 + ((n \[Pi])/b)^2];
\[Omega]r[m_, n_] := 
  2 \[Pi] ((m c0)/(2 a Sqrt[\[Epsilon]r]) + (n c0)/(
     2 b Sqrt[\[Epsilon]r]));
\[Epsilon]x[m_] := If[m == 0, 1, 2];
\[Epsilon]z[n_] := If[n == 0, 1, 2];
G[m_, n_] := Sinc[(m \[Pi] Dx)/(2 a)] Sinc[(n \[Pi] Dx)/(2 b)];
\[Psi]0[m_, n_] := 
  Sqrt[(\[Epsilon]x[m] \[Epsilon]z[n])/(a b)]
    Cos[((m \[Pi]) x0)/a] Cos[((n \[Pi]) z0)/b];

   E1[\[Theta]_, \[Phi]_, m_?NumericQ, n_?NumericQ] := 
  2 k0^2 Abs[Sin[\[Theta]] Sin[\[Phi]] Cos[\[Phi]]]*
               
   Abs[Cos[(m \[Pi])/2]^2 Sin[  (k0 a)/2 Sin[\[Theta]] Cos[\[Phi]]] + 
     I Sin[(m \[Pi])/2]^2 Cos[  (k0 a)/2 Sin[\[Theta]] Cos[\[Phi]]]]*
              Abs[
    Cos[(n \[Pi])/2]^2 Sin[  (k0 b)/2 Sin[\[Theta]] Sin[\[Phi]]] + 
     I Sin[(n \[Pi])/2]^2 Cos[ (k0 b)/2 Sin[\[Theta]] Sin[\[Phi]]]]*
              Abs[
    1/(k0^2 Sin[\[Theta]]^2 Cos[\[Phi]]^2 - ((m \[Pi])/a)^2) + 1/(
     k0^2 Sin[\[Theta]]^2 Sin[\[Phi]]^2 - ((n \[Pi])/b)^2)];
  E2[\[Theta]_, \[Phi]_, m_?NumericQ, n_?NumericQ] := 
  2 k0^2 Abs[Sin[\[Theta]] Cos[\[Theta]]]*
               
   Abs[Cos[(m \[Pi])/2]^2 Sin[  (k0 a)/2 Sin[\[Theta]] Cos[\[Phi]]] + 
     I Sin[(m \[Pi])/2]^2 Cos[  (k0 a)/2 Sin[\[Theta]] Cos[\[Phi]]]]*
              Abs[
    Cos[(n \[Pi])/2]^2 Sin[  (k0 b)/2 Sin[\[Theta]] Sin[\[Phi]]] + 
     I Sin[(n \[Pi])/2]^2 Cos[ (k0 b)/2 Sin[\[Theta]] Sin[\[Phi]]]]*
              Abs[
    Cos[\[Phi]]^2/(
     k0^2 Sin[\[Theta]]^2 Cos[\[Phi]]^2 - ((m \[Pi])/a)^2) - 
     Sin[\[Phi]]^2/(
     k0^2 Sin[\[Theta]]^2 Sin[\[Phi]]^2 - ((n \[Pi])/b)^2)];
I\[Theta][m_?NumericQ, n_?NumericQ] := 
  NIntegrate[
   Abs[E1[\[Theta], \[Phi], m, n]]^2*Sin[\[Theta]], {\[Theta], 0, 
    Pi/2}, {\[Phi], 0, Pi/2}];
I\[Phi][m_?NumericQ, n_?NumericQ] := 
  NIntegrate[
   Abs[E2[\[Theta], \[Phi], m, n]]^2*Sin[\[Theta]], {\[Theta], 0, 
    Pi/2}, {\[Phi], 0, Pi/2}];
\[Delta]eff[m_?NumericQ, n_?NumericQ] := 
  tan\[Delta] + Rs/h + (
   4 c0 h \[Epsilon]x[m] \[Epsilon]z[
     n] (I\[Theta][m, n] + I\[Phi][m, n]))/(\[Pi]^2 a b \[Omega]r[m, 
     n] \[Epsilon]r);
fb[b_] := c0/(2 b Sqrt[\[Epsilon]r]);
fa[a_] := c0/(2  a Sqrt[\[Epsilon]r]);
Zin[a_, b_, x0_, 
   z0_] := -I \[Mu]0 h \[Omega][
    f] ((\[Psi]0[0, 
       1]^2 G[0, 1]^2)/( \[CurlyEpsilon]r k[f]^2 (1 - I Q1) - 
      kt[0, 1]^2) + \!\(
\*UnderoverscriptBox[\(\[Sum]\), \(m = 0\), \(70\)]\(
\*UnderoverscriptBox[\(\[Sum]\), \(n = 
         0\), \(70\)]If[\((m == 0 && n == 1)\) || \((m == 1 && 
           n == 0)\), 0, 
\*FractionBox[\(
\*SuperscriptBox[\(\[Psi]0[m, n]\), \(2\)]\ G[m, 
            n]^2\), \(\[CurlyEpsilon]r\ 
\*SuperscriptBox[\(k[f]\), \(2\)] - kt[m, n]^2\)]]\)\));

Zin1[a_, b_, f1_, x0_, 
   z0_] := -I*\[Mu]0 h \[Omega]1[
    f1] ((\[Psi]0[0, 
       1]^2 G[0, 1]^2)/( \[CurlyEpsilon]r k1[f1]^2 (1 - I Q1) - 
      kt[0, 1]^2) + (\[Psi]0[1, 
       0]^2 G[1, 0]^2)/( \[CurlyEpsilon]r k1[f1]^2 (1 - I Q2) - 
      kt[1, 0]^2) + \!\(
\*UnderoverscriptBox[\(\[Sum]\), \(m = 0\), \(70\)]\(
\*UnderoverscriptBox[\(\[Sum]\), \(n = 
         0\), \(70\)]If[\((m == 0 && n == 1)\) || \((m == 1 && 
           n == 0)\), 0, 
\*FractionBox[\(
\*SuperscriptBox[\(\[Psi]0[m, n]\), \(2\)]\ G[m, 
            n]^2\), \(\[CurlyEpsilon]r\ 
\*SuperscriptBox[\(k1[f1]\), \(2\)] - kt[m, n]^2\)]]\)\));


(*----Condicoes iniciais-----*)

flag = 0;
Pborda = 2*10^-3;
Q1 = \[Delta]eff[0, 1];
z0 = b/4;
z0ant = z0;
step = z0;


(*Calculo inicial*)

ZinV = Zin[a, b, x0, z0];


PosMax = Ordering[Re[ZinV], -1] // Last;
dif = 50;
dif1 = 50;
PosF = Ordering[Abs[f - fr], 1] // Last;

(*Grrafico dinamico*)
con = 0;
Zdinamic = ConstantArray[NullSpace, 50];    expr = 
 Dynamic[Framed[
   ListLinePlot[Abs[Im[ZL] - Zdinamic], PlotLabel -> "Convergence", 
    Frame -> True, FrameLabel -> {"Pass", "Difference"}, 
    GridLines -> Automatic, 
    PlotRange -> {{1, Automatic}, {Automatic, Automatic}}, 
    BaseStyle -> FontSize -> 20, LabelStyle -> Directive[Bold, Black],
     PlotStyle -> Black, Filling -> Axis]]];
  

While[dif1 > 1,
  
          While [step > 1*10^-7,
   
      If[Im[ZinV[[PosMax]]] > Im[ZL],
            
            (*capacitiva*)
                  
    Pos = (Ordering[Abs[Re[ZinV[[PosMax ;;]]] - Re[ZL]], 1] // Last) +
       PosMax - 1;(*Zona capacitiva*)
                  dif = Abs[Im[ZinV[[Pos]]] - Im[ZL]];
                (*Guardando los valores encontrados de Zm*) 
                          con++;
                                 Zdinamic[[con]] = Im[ZinV[[Pos]]];
                (*---------------*) 
                  If[dif < 1 && Abs[Re[ZinV[[Pos]]] - Re[ZL]] < 2,
                Break[], 0];
                  
                                                
                  
    If[Abs[Re[ZinV[[Pos]]] - Re[ZL]] < 2 && Im[ZL] > Im[ZinV[[Pos]]],
                                    flag = 0; 
              step = step/2;
               z0 = z0 + step;
                ,
                                     flag = 1;
               step = step/2;
                      z0 = z0 - step;
                            ]
                        ,
            (*inductiva*)
                       
    Pos = Ordering[Abs[Re[ZinV[[;; PosMax]]] - Re[ZL]], 1] // 
      Last;(*Zona inductiva*)  
                dif = Abs[Im[ZinV[[Pos]]] - Im[ZL]];
              (*Guardando los valores encontrados de Zm*) 
                          con++;
                                 Zdinamic[[con]] = Im[ZinV[[Pos]]];
                                 
    ref@GUIKit`SetPropertyValue[{"canvas", "mathCommand"}, 
      ToString[expr, InputForm], InvokeThread -> "Dispatch"];
                (*---------------*)   
               If[dif < 1 && Abs[Re[ZinV[[Pos]]] - Re[ZL]] < 2,
              Break[], 0];
                 
    If[Abs[Re[ZinV[[Pos]]] - Re[ZL]] < 2 && Im[ZinV[[Pos]]] > Im[ZL],
                   
                    step = step/2;
                    z0 = z0 + step;
                        ,
                     flag = 1;
                     step = step/2;
                            z0 = z0 - step;
                 
                                  ]
          ];
              ZinV = Zin[a, b, x0, z0];
       PosMax = Ordering[Re[ZinV], -1] // Last;
      
        ];
  
        
     bant = b;
     b = c0/(2 (fb[b] + (fr - f[[Pos]])) Sqrt[\[Epsilon]r]);
     
     a = af[b];
     x0 = a/2;
     Q1 = \[Delta]eff[0, 1];
     ZinV = Zin[a, b, x0, z0];
     PosMax = Ordering[Re[ZinV], -1] // Last;
     dif1 = Abs[Im[ZinV][[PosF]] - Im[ZL]]; 
   If[step < 1*10^-7 || dif1 < 1, Break[], 0];
    step = b/4
        ZinV = Zin[a, b, x0, z0];
     PosMax = Ordering[Re[ZinV], -1] // Last;
     con++;(*Guardando los valores encontrados de Zm*) 
      Zdinamic[[con]] = Im[ZinV[[Pos]]];
       dif1 = Abs[Im[ZinV][[PosF]] - Im[ZL]];
     flag = 0;
  ];

bviejo = b;
aviejo = a;
z0viejo = z0;
x0viejo = x0;


flag3 = 1;

Clear[\[Epsilon]effa, areal, 
  breal, \[CapitalDelta]La, \[CapitalDelta]Lb, f0, \[Epsilon]effb];
\[Epsilon]effa = (\[Epsilon]r + 1)/
   2 + ((\[Epsilon]r - 1) (1 + 10 h/b)^(-(1/2)))/2 ;
\[CapitalDelta]La = (
  h 0.412 ((\[Epsilon]effa + 0.3) (b/h + 0.264)))/((\[Epsilon]effa - 
     0.258) (b/h + 0.8));
\[Epsilon]effb = (\[Epsilon]r + 1)/
   2 + ((\[Epsilon]r - 1) (1 + 10 h/a)^(-(1/2)))/2 ;
\[CapitalDelta]Lb = (
  h 0.412 ((\[Epsilon]effb + 0.3) (a/h + 0.264)))/((\[Epsilon]effb - 
     0.258) (a/h + 0.8));

breal = b - 2 \[CapitalDelta]Lb;
areal = breal*factor;
x0real = x0 - \[CapitalDelta]La;
z0real = z0 - \[CapitalDelta]Lb;


picture = ListPlot[{Im[Zin[a, b, x0, z0]], Re[Zin[a, b, x0, z0]]},
   PlotRange -> Full, 
   PlotStyle -> {Directive[Black, AbsoluteDashing[5]], 
     Directive[Black]}, DataRange -> {fmax*10^-9, fmin*10^-9}, 
   Frame -> True, FrameLabel -> {"Freq[GHz]", "Zin[\[CapitalOmega]]"},
    GridLines -> Automatic, Joined -> True, AspectRatio -> 3/4];
If[ValueQ[picture],Export[StringJoin["/var/www/html/disp_form/results/",user,"3",".jpg"], picture],picture=False];
Quit[];
{{variavelLoopEscolhidaPorJardiel}} = SQLExecute[conn, "SELECT COUNT(*) FROM valor_dispositivo_atributos WHERE jaleu=FALSE AND id_dispositivo=3"]];
CloseSQLConnection[conn];
